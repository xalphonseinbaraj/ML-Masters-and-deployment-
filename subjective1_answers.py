# -*- coding: utf-8 -*-
"""subjective answers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ycTzU26lkvQHjciVa-9BzaiUTAfaI9Ps

## Q1. Write a Python program to get the string from the given string where all the occurrence of its first char has been changed to '$,' except first char itself?
"""

def change_char(str1):
  char = str1[0]
  str1 = str1.replace(char, '$')
  str1 = char + str1[1:]

  return str1

print(change_char('prospect'))

"""## Q2. Write a Python program to get the single string from the two given strings, and separated by the space and swap the first two characters of each string?"""

L='abc'
M='xyz'
print(L ,',',M)
L,M=M,L
print(L,M)

"""## Write the Python program to add 'ing' at the end of the given string (length of the string should be at least 3). If given string already ends with 'ing,' then add 'ly' instead. If string length of the given string is less than 3, leave it unchanged?"""

str1=input()
length = len(str1)

if length > 2:
  if str1[-3:] == 'ing':
    str1 += 'ly'
  else:
    str1 += 'ing'
print(str1)

"""## Q4. Write the Python program to find the first appearance of the substring 'not' and 'poor' from the given string, if 'not' follows the 'poor', replace the whole 'not'...' poor' substring with 'good'.Return the resulting string.

## Q5. Write the Python program to remove the characters which have odd index values of a given string.
"""

str=input()
result = "" 
for i in range(len(str)):
  if i % 2 == 0:
    result = result + str[i]
    print(i,result)
print(result)

"""## Q6. Write the Python function to get a string made of 4 copies of the last two characters of the specified string (length must be at least 2)."""

str=input()
sub_str = str[-2:]
print(sub_str * 4)

"""## Q7. Write the python function to get a string made of its first three characters of a specified string. If the length of the string is less than 3 then return the original string."""

str=input()
if (len(str)>3):
  print(str[:3])
else:
  print(str)

"""## Q8. Write the python program to print the following floating numbers up to 2 decimal places?"""

x =float(input())
print("\nOriginal Number: ", x)
print("Formatted Number: "+"{:.2f}".format(x));

"""## Q9. Write the Python program to format a number with a percentage?"""

x =float(input())
print("\nOriginal Number: ", x)
print("Formatted Number: "+"{:.2%}".format(x));

"""## Q10. Write the Python program to count occurrences of a substring in a String?"""

str1 = 'Welcome to python world.'
print(str1)
print(str1.count("to"))
print()

"""## Q11. Write the Python program to count repeated characters in a string."""

str1=' thequickbrownjumpsoverthelazydog '
l=str1.count('o')
print('o',l)
m=str1.count('e')
print('e',m)
n=str1.count('u')
print('u',n)
o=str1.count('h')
print('h',o)
p=str1.count('r')
print('r',p)  
q=str1.count('t')
print('t',q)

"""## Q12. Write the Python program to print the square and cube symbol in the area of a rectangle and volume of a cylinder?"""

area = 1256.66
volume = 1254.725
decimals = 2
print("The area of the rectangle is {0:.{1}f}cm\u00b2".format(area, decimals))
decimals = 3
print("The volume of the cylinder is {0:.{1}f}cm\u00b3".format(volume, decimals))

"""##  Q13. Write the Python program to check if a string contains all letters of the alphabet?"""



"""## Q14. Write the Python program to find the second most repeated word in a given string?"""

def word_count(str):
    counts = dict()
    words = str.split()

    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

    counts_x = sorted(counts.items(), key=lambda kv: kv[1])
    #print(counts_x)
    return counts_x[-2]
 
print(word_count("Both of these issues are fixed by postponing the evaluation of annotations. Instead of compiling code which executes expressions in annotations at their definition time, the compiler stores the annotation in a string form equivalent to the AST of the expression in question. If needed, annotations can be resolved at runtime using typing.get_type_hints(). In the common case where this is not required, the annotations are cheaper to store (since short strings are interned by the interpreter) and make startup time faster."))

"""## Q15. Write the Python program to find the minimum window in the given string, which will contains all the characters of another given strings?"""

import collections
def min_window(str1, str2):
    result_char, missing_char = collections.Counter(str2), len(str2)
    i = p = q = 0
    for j, c in enumerate(str1, 1):
        missing_char -= result_char[c] > 0
        result_char[c] -= 1
        if not missing_char:
            while i < q and result_char[str1[i]] < 0:
                result_char[str1[i]] += 1
                i += 1
            if not q or j - i <= q - p:
                p, q = i, j
    return str1[p:q]
           
str1 = "PRWSOERIUSFK"
str2 = "OSU"
print("Original Strings:\n",str1,"\n",str2)
print("Minimum window:")
print(min_window(str1,str2))

"""## Q16. Write the Python program to find smallest window that contains all characters of the given string?"""

